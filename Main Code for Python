import serial
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import cv2
from deepface import DeepFace
import time
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import imaplib
import email
from email.header import decode_header
import os
from datetime import datetime
from tkinter import PhotoImage
import threading

# Initialize serial communication with Arduino
arduino = serial.Serial(port="COM8", baudrate=9600, timeout=1)  # Update COM port as per your system
time.sleep(2)  # Give the connection a second to settle

# Function to send email with an attachment
def send_email_with_attachment(sender_email, sender_password, recipient_email, subject, message_body, attachment_path):
    try:
        msg = MIMEMultipart()
        msg['Subject'] = subject
        msg['From'] = sender_email
        msg['To'] = recipient_email

        # HTML content with Accept and Deny buttons
        html = """
        <html>
            <body>
                <p>Dear User,</p>
                <p>An unknown person tried using your card. Please respond:</p>
                <a href="https://www.linkedin.com/in/chaitanya-shirse-871a69263/" style="padding: 10px; background-color: green; color: white; text-decoration: none; border-radius: 5px;">Ǎccept</a>
                <a href="https://www.linkedin.com/in/chaitanya-shirse-871a69263/" style="padding: 10px; background-color: red; color: white; text-decoration: none; border-radius: 5px;">Ďeny</a>
                <p>Thank you!</p>
            </body>
        </html>
        """

        # Attach the HTML content to the email
        msg.attach(MIMEText(html, 'html'))

        if os.path.exists(attachment_path):
            with open(attachment_path, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename={os.path.basename(attachment_path)}',
            )
            msg.attach(part)

        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient_email, msg.as_string())
        print(f"Email sent successfully to {recipient_email}")
        arduino.write(f"Email sent\n".encode())
    except Exception as e:
        print(f"Error while sending email: {e}")

# Define the data for each unique number
users = {
    "7335AFE4": {
        "name": "Chaitanya Shirse", #Replace with your name 
        "image_path": "D:\\Camera Roll\\WIN_20230725_22_37_40_Pro.jpg", #Replace with your Photo Path
        "email": "chaitanya3035@gmail.com", #Replace your Mail ID
        "passcode": "1111" 
    },
    "239FD711": {
        "name": "RD",
        "image_path": "D:\\PYTHON\\IMGS\\RD.jpg",
        "email": "*************@gmail.com",
        "passcode": "2222"
    },
    "D9E29599": {
        "name": "RJ",
        "image_path": "E:\\program\\known_faces\\RJ.jpg",
        "email": "*************@gmail.com",
        "passcode": "3333"
    },
    "7BAEE13": {
        "name": "SN",
        "image_path": "E:\\program\\known_faces\\SN.jpg",
        "email": "*************@gmail.com",
        "passcode": "4444"
    },
    "2482EEA7": {
        "name": "HS",
        "image_path": "E:\\program\\known_faces\\HS.jpg",
        "email": "*************@gmail.com",
        "passcode": "5555"
    }
    #"E33438FA": {
}

selected_user = None
# Email credentials
sender_email = "***********@gmail.com" #Replace with sender mail
sender_password = "**** **** **** ****" # 16 Digit Password


IMAP_SERVER = "imap.gmail.com"  # Set this to the correct IMAP server
try:
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    print("Connected to the IMAP server successfully!")
except Exception as e:
    print(f"Connection failed: {e}")

# Initialize the main Tkinter window
root = tk.Tk()
root.attributes('-fullscreen', True)

def exit_fullscreen(event=None):
    root.attributes('-fullscreen', False)
    root.geometry("900x500")

# Bind Esc key to exit fullscreen
root.bind("<Escape>", exit_fullscreen)
root.title("ATM Security System")

def exit_program():   
    """Exit the program."""
    root.destroy()  # Close the Tkinter root window
    exit()  

def read_rfid():
    """Read RFID UID from Arduino."""
    if arduino.in_waiting > 0:
        uid = arduino.readline().decode("utf-8").strip()
        return uid
    return None
rfid_active = False  # Global flag to control RFID reading


# Function to animate the GIF
def animate_gif(label, frames, delay):
    def update_frame(index):
        frame = frames[index]
        label.config(image=frame)
        label.image = frame  # Keep a reference
        next_index = (index + 1) % len(frames)
        label.after(delay, update_frame, next_index)
    update_frame(0)

# Function to show the welcome screen
def show_welcome_screen():
    global rfid_active  # Use the global flag
    arduino.close()
    arduino.open()
    clear_screen()
    # Restart Arduino connection
    time.sleep(2)    # Give the connection a second to settle

    print('Please insert a card')

    # Send input to Arduino to enable RFID reading
    arduino.write("START_RFID\n".encode())  # Enable RFID reading
    print("Sent command: START_RFID")  # Debug print    # Send input to Arduino
    arduino.write("DISPLAY:WLC to DBATU ATM \n".encode())
    arduino.write(f"Pls insert card\n".encode())

    root.configure(bg="cyan")
    tk.Label(root, text="Welcome to DBATU ATM", font=("HP Simplified Jpan", 40), bg="cyan", fg="blue").pack(pady=10)
    tk.Label(root, text="Please insert your card and select your user.", font=("Agency FB", 30), bg="cyan", fg="black").pack(pady=10)
    
    gif_frames = [PhotoImage(file=r"E:\program\Atm.gif", format=f"gif -index {i}") for i in range(17)]  # Adjust range as per GIF frame count

    # Display the first frame
    gif_label = tk.Label(root, bg="cyan")
    gif_label.pack(pady=20)

    # Start animating the GIF
    animate_gif(gif_label, gif_frames, delay=100)  # Adjust delay for speed (milliseconds)

    rfid_active = True  # Set the flag to true to start reading RFID

    def poll_rfid():
        global selected_user
        if rfid_active:  # Check if RFID reading is active
            uid = read_rfid()  # Function to read RFID
            if uid:
                print(f"Scanned UID: {uid}")
                if uid in users:
                    selected_user = uid
                    print(f"Selected user: {users[uid]['name']}")
                    arduino.write(f"{users[uid]['name']}\n".encode())
                    card.config(text=f"Selected user: {users[uid]['name']}")
                    root.after(4000,start_verification(uid))
                    # Call start_verification with the scanned UID
                else:
                    print("Please try again.")
                    card.config(text="Please try again.")
                    #tk.Label(root, text="Unknown card. Please try again.", font=("Agency FB", 18), bg="cyan", fg="black").pack(pady=30)

        root.after(500, poll_rfid)  # Continue polling every 500 ms
    card = tk.Label(root, text="",font=("Agency FB", 25), bg="cyan", fg="black")
    card.pack(pady=30)
    # Create the exit button
    exit_btn = tk.Button(root, text="Exit", font=("Century Gothic", 20), command=exit_program)
    exit_btn.pack(pady=20)

    # Start polling for RFID
    #poll_rfid()
    threading.Thread(target=poll_rfid, daemon=True).start()

# Function to clear the screen
def clear_screen():
    global rfid_active  # Use the global flag
    arduino.write("STOP_RFID\n".encode())  # Disable RFID reading
    rfid_active = False  # Set the flag to false to stop reading RFID
    for widget in root.winfo_children():
        widget.destroy()

# Function to start verification for a selected user
def start_verification(user_key):
    clear_screen()
    person = users[user_key]
    root.configure(bg="lightgreen")

    arduino.write("DISPLAY:FACE Verify\n".encode())
    
    # Displaying the verification message
    tk.Label(root, text=f"Verifying {person['name']} ...", font=("HP Simplified Hans", 35), bg="lightgreen", fg ="blue").pack(pady=40)
    tk.Label(root, text="Look at the camera for face verification...", font=("Agency FB", 30), bg="lightgreen", fg="black").pack(pady=30)

    # Load and display the GIF
    gif_path = r"E:\program\faceverify.gif"  # Path to your GIF
    gif_image = Image.open(gif_path)
    gif_label = tk.Label(root, bg="lightgreen")
    gif_label.pack(pady=20)

    def update_gif(frame_index):
        # Update the label with the next frame of the GIF
        gif_image.seek(frame_index)
        gif_frame = ImageTk.PhotoImage(gif_image)
        gif_label.configure(image=gif_frame)
        gif_label.image = gif_frame  # Keep a reference to avoid garbage collection
        root.after(100, update_gif, (frame_index + 1) % gif_image.n_frames)

    update_gif(0)  # Start the GIF animation

    # Start a new thread for the verification process
    verification_thread = threading.Thread(target=verify_face, args=(person,))
    verification_thread.start()

def verify_face(person):
    # Start polling for RFID
    print(f"Verifying for {person['name']}...")

    arduino.write(f"Verifying...\n".encode())

    # Face verification process
    video_capture = cv2.VideoCapture(0)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

    verified = False
    unknown_face_detected = False  # Flag to detect if an unknown face was found
    
    while True:
        ret, frame = video_capture.read()
        if not ret:
            break

        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        for (x, y, w, h) in faces:
            face_crop = frame[y:y + h, x:x + w]
            temp_face_path = "temp_face.jpg"
            cv2.imwrite(temp_face_path, face_crop)

            try:
                result = DeepFace.verify(
                    img1_path=person["image_path"],
                    img2_path=temp_face_path,
                    model_name="VGG-Face",
                    enforce_detection=False
                )
                if result["verified"]:
                    verified = True
                    break
            except Exception as e:
                tk.Label(root, text=f"Verification error: {e}", fg="red", font=("Century Gothic", 20)).pack()
        
        if verified:
            tk.Label(root, text=f"✅ Successfully verified {person['name']}'s face", fg="green", font=("Century Gothic", 20)).pack()
            arduino.write(f"Verified.\n".encode())
            
            root.update()
            root.after(2000)
            break

        elif not unknown_face_detected:
            print("Unknown face detected...")
            arduino.write(f"Unknown face\n".encode())
            
            tk.Label(root, text="❌Unknown face detected...", fg="red", font=("Century Gothic", 20)).pack() 
            
            unknown_face_detected = True
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            unknown_image_path = f"E:\\program\\dataset\\unknown_{timestamp}.jpg"
            cv2.imwrite(unknown_image_path, frame)
            video_capture.release()
            cv2.destroyAllWindows()

            arduino.write("DISPLAY:EMAIL Verify\n".encode())

            send_email_with_attachment(
                sender_email=sender_email,
                sender_password=sender_password,
                recipient_email=person["email"],
                subject="Action Required: Unknown Attempt Detected",
                message_body="An unknown person tried using your card. See the attached image.",
                attachment_path=unknown_image_path
            )
            tk.Label(root, text="Waiting for email Responce...", fg="blue", font=("Century Gothic", 20)).pack()
            root.update()
            monitor_all_emails(person)

        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.imshow("Verifying Face", frame)

        #if cv2.waitKey(1) & 0xFF == ord('q'):
        #    tk.Label(root, text="Verification cancelled. Restarting...", fg="red", font=("Century Gothic", 14)).pack()
        #    break

    video_capture.release()
    cv2.destroyAllWindows()

    if verified:
        show_passcode_screen(person)
    

def monitor_all_emails(person):
    """Monitor all new emails and check for 'accept' keyword."""
    print("Monitoring Responce email...")
    arduino.write(f"Check Mail\n".encode())

    try:
        mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        mail.login(sender_email, sender_password)
        start_time = datetime.now()
        
        while True:
            mail.select("inbox")
            status, messages = mail.search(None, "UNSEEN")
            email_ids = messages[0].split()
            
            for email_id in email_ids:
                status, msg_data = mail.fetch(email_id, "(RFC822)")
                
                for response_part in msg_data:
                    if isinstance(response_part, tuple):
                        msg = email.message_from_bytes(response_part[1])
                        date_str = msg["Date"]
                        email_time = datetime.strptime(date_str, "%a, %d %b %Y %H:%M:%S %z").replace(tzinfo=None)
                        
                        if email_time < start_time:
                            continue
                        
                        from_ = msg.get("From")
                        subject, encoding = decode_header(msg["Subject"])[0]
                        if isinstance(subject, bytes):
                            subject = subject.decode(encoding if encoding else "utf-8")
                        
                        body = ""
                        if msg.is_multipart():
                            for part in msg.walk():
                                if part.get_content_type() == "text/plain":
                                    body = part.get_payload(decode=True).decode()
                                    break
                        else:
                            body = msg.get_payload(decode=True).decode()

                        print(f"From: {from_}, Subject: {subject}, Body: {body}")
                        
                        if 'accept' in subject.lower() or 'accept' in body.lower() or 'yes' in subject.lower() or 'yes' in body.lower():
                            print("Access Granted")
                            tk.Label(root, text="Access Granted", fg="red", font=("Century Gothic", 20)).pack()
                            root.after(1000, show_passcode_screen(person))
                            return
                        elif 'deny' in subject.lower() or 'deny' in body.lower() or 'no' in subject.lower() or 'no' in body.lower():
                            print("Access Denied")
                            tk.Label(root, text="Access Denied. Restarting...", fg="red", font=("Century Gothic", 20)).pack()
                            root.after(3000, show_welcome_screen)
                            return
            
            time.sleep(10)  # Wait for 10 seconds before checking again
    except Exception as e:
        print(f"Error while checking emails: {e}")
        show_welcome_screen()

def show_passcode_screen(person):
    clear_screen()
    print("Please Enter Passcode")
    arduino.write("DISPLAY:Passcode Verify\n".encode())
    tk.Label(root, text=f"Welcome, {person['name']}", font=("HP Simplified Jpan", 35), bg="lightblue", fg="blue").pack(pady=40)
    tk.Label(root, text="Enter your passcode:", font=("Agency FB", 25), bg="lightblue", fg="black").pack(pady=30)

    arduino.write(f"Enter Passcode\n".encode())

    keyboard_frame = tk.Frame(root, width=500, height=500, bg="cyan", relief="ridge", bd=18)
    keyboard_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
    
    passcode_entry = tk.Entry(keyboard_frame, font=("Helvetica", 18), show='*', justify="center", relief="ridge", bd=2 )
    passcode_entry.grid(row=0, column=0, columnspan=5, pady=10, padx=10)

    def verify_passcode():
        entered_passcode = passcode_entry.get()
        if entered_passcode == person["passcode"]:
            tk.Label(
                root,
                text="Passcode verified. Starting transaction...",
                fg="green",
                font=("Century Gothic", 20),
                anchor=tk.CENTER
            ).place(relx=0.5, rely=0.9, anchor=tk.S)
            arduino.write(f"Verified \n".encode())
            root.after(2000, show_transaction_screen)
        else:
            tk.Label(
                root,
                text="Incorrect passcode. Please try again.",
                fg="red",
                font=("Century Gothic", 20),
                anchor=tk.CENTER
            ).place(relx=0.5, rely=0.9, anchor=tk.S)
            arduino.write(f"wrong Passcode\n".encode())
            root.after(2000, show_welcome_screen)

    def exit_to_home():
        show_welcome_screen()

    def button_click(value):
        if value == "Clear":
            current = passcode_entry.get()
            passcode_entry.delete(0, tk.END)
            passcode_entry.insert(0, current[:-1])
        elif value == "Cancel":
            passcode_entry.delete(0, tk.END)
        elif value == "Exit":
            exit_to_home()
        elif value == "Enter":
            verify_passcode()
        else:
            passcode_entry.insert(tk.END, value)

    def handle_serial_input():
        if arduino.in_waiting > 0:
            key = arduino.read().decode().strip()  # Read and decode the serial input
            if key in ["C", "X", "E", "V", "*", "#"]:
                # Handle special keys like C (Clear), X (Cancel), E (Exit), V (Verify), * and #
                if key == "C":
                    button_click("Clear")  # Call Clear functionality when 'C' is pressed
                elif key == "X":
                    button_click("Cancel")  # Call Cancel functionality when 'X' is pressed
                elif key == "E":
                    button_click("Exit")  # Call Enter functionality when 'E' is pressed
                elif key == "V":
                    button_click("Enter")
                # Add more conditions for other special keys if needed

            elif key.isdigit():  # Allow digits only
                button_click(key)  # If the key is a valid digit, process it

        root.after(100, handle_serial_input)  # Check serial input every 100ms


    def handle_keypress(event):
        key = event.char
        if key.isdigit():
            passcode_entry.insert(tk.END, key)
        elif event.keysym == "Return":
            button_click("Enter")
        elif event.keysym == "BackSpace":
            current_text = passcode_entry.get()
            passcode_entry.delete(0, tk.END)
            passcode_entry.insert(0, current_text[:-1])
        elif event.keysym.lower() == "escape":
            root.destroy()

    root.bind("<Key>", handle_keypress)

    keys = [
        ["1", "2", "3", "Clear"],
        ["4", "5", "6", "Cancel"],
        ["7", "8", "9", "Exit"],
        ["", "0", "", "Enter"]
    ]

    button_colors = {
        "Clear": "yellow",
        "Cancel": "orange",
        "Exit": "red",
        "Enter": "green"
    }

    for r, row in enumerate(keys, start=1):
        for c, key in enumerate(row):
            button_color = button_colors.get(key, "gray")
            button = tk.Button(
                keyboard_frame,
                text=key,
                font=("Helvetica", 16),
                width=5,
                height=2,
                bg=button_color,
                fg="white",
                relief="ridge",
                bd=2,
                command=lambda k=key: button_click(k)
            )
            button.grid(row=r, column=c, padx=5, pady=5)

    # Call the serial input handler continuously
    handle_serial_input()

    root.update()

def show_transaction_screen():
    clear_screen()

    arduino.write("DISPLAY:Transaction \n".encode())
    tk.Label(root, text="Welcome to DBATU ATM", font=("HP Simplified Hans", 35), bg="lightgreen", fg="blue", bd=5).pack(pady=40)
    tk.Label(root, text="Enter the amount to withdraw (100 to 40,000):", font=("Agency FB", 25), bg="lightgreen", fg="black", bd=2).pack(pady=30)
    arduino.write(f"Enter Amount\n".encode())

    def demolished():
        show_welcome_screen()

    def process_transaction(amount):
        arduino.write(f"Processing\n".encode())
        def update_progress(current):
            if current <= amount:
                progress_label.config(text=f"Transaction in process: Rs {current}/{amount} completed...")
                root.after(10, update_progress, current + 100)
            else:
                progress_label.config(text=f"Transaction of Rs {amount} successful", fg="green")
                tk.Label(root, text="Thank you, Visit again", font=("Century Gothic", 25), bg="blue", fg="white", bd=2).pack(pady=10)
                arduino.write(f"Transaction of Rs {amount} successful \n".encode())
                root.after(6000, demolished)

        update_progress(0)

    def on_amount_select(amount):
        direct_buttons_frame.pack_forget()
        keyboard_frame.pack_forget()
        if amount == "Other":
            keyboard_frame.pack(pady=20)
        else:
            process_transaction(int(amount))

    direct_buttons_frame = tk.Frame(root, bg="lightgreen")
    direct_buttons_frame.pack(pady=10, fill="both", expand=True)

    left_frame = tk.Frame(direct_buttons_frame, bg="lightgreen")
    left_frame.pack(side=tk.LEFT, anchor="n", padx=100, pady=150)

    right_frame = tk.Frame(direct_buttons_frame, bg="lightgreen")
    right_frame.pack(side=tk.RIGHT, anchor="n", padx=100, pady=150)

    amounts_left = [500, 1000, 5000, 10000]
    amounts_right = [20000, 30000, 40000, "Other"]

    for amount in amounts_left:
        tk.Button(
            left_frame, text=str(amount), font=("Helvetica", 16), bg="cyan", fg="black",
            command=lambda a=amount: on_amount_select(a), width=25
        ).pack(pady=10)

    for amount in amounts_right:
        tk.Button(
            right_frame, text=str(amount), font=("Helvetica", 16), bg="cyan", fg="black",
            command=lambda a=amount: on_amount_select(a), width=25
        ).pack(pady=10)

    keyboard_frame = tk.Frame(root, bg="cyan", relief="ridge", bd=18)

    amount_entry = tk.Entry(keyboard_frame, font=("Helvetica", 18), justify="center", relief="ridge", bd=2)
    amount_entry.grid(row=0, column=0, columnspan=5, pady=10, padx=10)

    progress_label = tk.Label(root, text="", font=("Century Gothic", 20), fg="blue", bd=2)
    progress_label.pack(pady=10)

    def button_click(value):
        if value == "Clear":
            now = amount_entry.get()
            amount_entry.delete(0, tk.END)
            amount_entry.insert(0, now[:-1])
        elif value == "Cancel":
            amount_entry.delete(0, tk.END)
        elif value == "Exit":
            demolished()
        elif value == "Enter":
            try:
                amount = int(amount_entry.get())
                if 100 <= amount <= 40000 and amount % 100 == 0:
                    process_transaction(amount)
                else:
                    progress_label.config(text="Invalid amount. Please try again.", fg="red")
            except ValueError:
                progress_label.config(text="Invalid input. Enter a numeric value.", fg="red")
        else:
            amount_entry.insert(tk.END, value)

###########
    def handle_serial_input():
        if arduino.in_waiting > 0:
            key = arduino.read().decode().strip()  # Read and decode the serial input
            if key in ["C", "X", "E", "V", "*", "#"]:
                # Handle special keys like C (Clear), X (Cancel), E (Exit), V (Verify), * and #
                if key == "C":
                    button_click("Clear")  # Call Clear functionality when 'C' is pressed
                elif key == "X":
                    button_click("Cancel")  # Call Cancel functionality when 'X' is pressed
                elif key == "E":
                    button_click("Exit")  # Call Enter functionality when 'E' is pressed
                elif key == "V":
                    button_click("Enter")
                # Add more conditions for other special keys if needed

            elif key.isdigit():  # Allow digits only
                button_click(key)  # If the key is a valid digit, process it

        root.after(100, handle_serial_input)  # Check serial input every 100ms            
##########

    def handle_keypress(event):
        key = event.char
        if key.isdigit():
            amount_entry.insert(tk.END, key)
        elif event.keysym == "Return":
            button_click("Enter")
        elif event.keysym == "BackSpace":
            current_text = amount_entry.get()
            amount_entry.delete(0, tk.END)
            amount_entry.insert(0, current_text[:-1])
        elif event.keysym.lower() == "escape":
            root.destroy()

    root.bind("<Key>", handle_keypress)

    keys = [
        ["1", "2", "3", "Clear"],
        ["4", "5", "6", "Cancel"],
        ["7", "8", "9", "Exit"],
        ["", "0", "", "Enter"]
    ]

    button_colors = {
        "Clear": "yellow",
        "Cancel": "orange",
        "Exit": "red",
        "Enter": "green"
    }

    for r, row in enumerate(keys, start=1):
        for c, key in enumerate(row):
            button_color = button_colors.get(key, "gray")
            button = tk.Button(
                keyboard_frame,
                text=key,
                font=("Helvetica", 16),
                width=5,
                height=2,
                bg=button_color,
                fg="white",
                relief="ridge",
                bd=4,
                command=lambda k=key: button_click(k)
            )
            button.grid(row=r, column=c, padx=5, pady=5)

    keyboard_frame.pack_forget()  # Start by hiding the keyboard
    handle_serial_input()  # Start the serial input handler


# Start the application
show_welcome_screen()
root.mainloop()

